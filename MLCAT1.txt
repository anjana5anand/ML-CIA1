MACHINE LEARNING TECHNIQUES
NAME: Anjana Anand
CIA-1
Q1. Generate 1000 random points (x,y)
import random
import matplotlib.pyplot as plt
import numpy as np
points = []
for i in range(0,1000):
    x=np.random.randint(1,1001,1000)
    points.append(x)
for i in range (0,1000):
    y=np.random.randint(1,1001,1000)
    points.append(y)
plt.scatter(x,y)

Q2.Build a simple linear regression from scratch
import random
import matplotlib.pyplot as plt
import numpy as np
points = []
for i in range(0,1000):
    x=np.random.randint(1,1001,1000)
    points.append(x)
for i in range (0,1000):
    y=np.random.randint(1,1001,1000)
    points.append(y)
plt.scatter(x,y)
x_mean = np.mean(x)
y_mean = np.mean(y)
n = len(x)
numerator = 0
denominator = 0
for i in range(n):
    numerator += (x[i] - x_mean) * (y[i] - y_mean)
    denominator += (x[i] - x_mean) ** 2
    
b1 = numerator / denominator
b0 = y_mean - (b1 * x_mean)
print(b1, b0)
x_max = np.max(x) + 100
x_min = np.min(x) - 100
x = np.linspace(x_min, x_max, 1000)
y = b0 + b1 * x
plt.plot(x, y, color='#00ff00', label='Linear Regression')
plt.legend()
plt.show()

Q3.Use gradient descent to find the optimal slope and intercept value

till step 3 - no use of sklearn. however you may use numpy and pandas as needed.



Q4.Apply sklearn on the dataset and find the best fit slope and intercept. Compare the values obtained in step 3 and 4 and write your inference from that.